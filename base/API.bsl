
Процедура ВыполнитьКоманду(Идентификатор, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ начало",);
	Попытка	
		ПрочитатьСессиюОтладки();
		
		ОбщиеПараметры = get_prop(context.params,"public", Новый Структура);
		
		//Обновление статусов
		Если get_prop(ОбщиеПараметры, "refresh_statuses") = Истина Тогда 
			ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ Обновление статусов началось",);
			
			ПараметрыВызова	= Новый Соответствие();
			ПараметрыВызова.Вставить("params", context.params );
			ПараметрыВызова.Вставить("commands_result",Новый Массив);
			ПараметрыВызова.Вставить("endpoint","");
			ПараметрыВызова.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
			ПараметрыВызова.Вставить("ini_name","ОбновитьСтатусы_send");
			ConnectionId	= Неопределено;
			context.params.Свойство("ConnectionId", ConnectionId);
			ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
			ПараметрыВызова.Вставить("object",Новый Соответствие());
			
			Результат = API_BLOCKLY_RUN(ПараметрыВызова);
			Если Результат["status"] = "complete" Тогда
				ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ Обновление статусов выполнено успешно",);
			Иначе
				ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ Обновление статусов завершено с ошибкой",);	
			КонецЕсли	
		КонецЕсли;	
		//Обновление статусов
		
		ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ выполнено",);	
	Исключение
		//ИнфОбОшибке = ИнформацияОбОшибке();
		//ОшибкаСтруктура = NewExtExceptionСтруктура(ИнфОбОшибке);
		ЗаписьЖурналаРегистрации("Это "+ЛокализацияНазваниеПродукта()+" Событие",,,ЛокализацияНазваниеПродукта()+" Данные",ЛокализацияНазваниеПродукта()+" ФЗ ошибка",);
	КонецПопытки	
КонецПроцедуры
		

Функция API_BLOCKLY_UPDATE_INI(ПараметрыВызова) Экспорт
	ПрочитатьСессиюОтладки();
	ПриЗапускеРобота(ПараметрыВызова);
	IniUpdate(ПараметрыВызова);
	СохранитьСессиюОтладки();
КонецФункции

Функция API_BLOCKLY_RUN(ПараметрыВызова) Экспорт
	Попытка
		ПрочитатьСессиюОтладки();
		ПриЗапускеРобота(ПараметрыВызова);
		Результат = ExternalCalcIni(ПараметрыВызова); // Если complete или error то 		
		Возврат Результат;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = NewExtExceptionСтруктура(ИнфОбОшибке);
		Возврат Новый структура("data, status", ОшибкаСтруктура, "error");
	КонецПопытки;
КонецФункции


Процедура API_BLOCKLY_RUN_BACKGROUND(ПараметрыВызова, Адрес) Экспорт
	//Результат загрузки ини файла
	Попытка
		XMLИниФайл	= Load_ini( ПараметрыВызова["ini_name"], ПараметрыВызова );
		Если ТипЗнч(XMLИниФайл) = Тип("Строка") И Врег(Лев(XMLИниФайл,4)) = "<XML"  Тогда
			Результат = Новый Структура("status, data, LoadIni", "complete", Новый Структура("detail, message", ПараметрыВызова["ini_name"], "ИНИ успешно получен"));
			//результат пердачи объектов, только в случае успешного получения ини файла
			Результат = API_BLOCKLY_RUN(ПараметрыВызова);
		Иначе
			Результат = Новый Структура("status, data, LoadIni", "error", Новый Структура("detail, message", ПараметрыВызова["ini_name"], XMLИниФайл));
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
		Результат = Новый структура("data, status", Ошибка, "error");		
	КонецПопытки;  
	
	СообщитьПрогресс(,,Результат);
КонецПроцедуры 


Функция API_BLOCKLY_COMMANDS(ПараметрыВызова) Экспорт
	ПрочитатьСессиюОтладки();
	ПриЗапускеРобота(ПараметрыВызова);
	Результат = ОбработатьКоманды(ПараметрыВызова);
	Возврат Результат;
КонецФункции

Функция API_DOCUMENT_READ_STATUS(ПараметрыВызова) Экспорт
	ТаблицаИдентификаторов = ПолучитьТаблицуИдентификаторовДокументовИнтеграции(ПараметрыВызова);
	Возврат СтатусыДокументовПолучитьСостоянияОбъектов(ТаблицаИдентификаторов);
КонецФункции 

Функция ПолучитьТаблицуИдентификаторовДокументовИнтеграции(СписокДокументовИнтеграции)
	tUID = Новый ТаблицаЗначений;
	tUID.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка") );
	Для Каждого ДокументИнтеграции Из СписокДокументовИнтеграции Цикл
		НовСтрока = tUID.Добавить();
		UID = get_prop(ДокументИнтеграции,"ИдСБИС", get_prop(ДокументИнтеграции,"UID"));    //TODO удаить ИдИС когда UID до онлайна доедет
		НовСтрока.UID = Формат(UID, "ЧГ=0");
	КонецЦикла;
	Возврат tUID; 
КонецФункции

