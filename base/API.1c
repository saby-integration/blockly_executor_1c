
Процедура ВыполнитьКоманду(Идентификатор, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ начало",);
	Попытка	
		ПрочитатьСессиюОтладки();
		
		ОбщиеПараметры = get_prop(context.params,"public", Новый Структура);
		
		//Обновление статусов
		Если get_prop(ОбщиеПараметры, "refresh_statuses") = Истина Тогда 
			ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ Обновление статусов началось",);
			
			ПараметрыВызова	= Новый Соответствие();
			ПараметрыВызова.Вставить("params", context.params );
			ПараметрыВызова.Вставить("commands_result",Новый Массив);
			ПараметрыВызова.Вставить("endpoint","");
			ПараметрыВызова.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
			ПараметрыВызова.Вставить("ini_name","ОбновитьСтатусы_send");
			ConnectionId	= Неопределено;
			context.params.Свойство("ConnectionId", ConnectionId);
			ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
			ПараметрыВызова.Вставить("object",Новый Соответствие());
			
			Результат = API_BLOCKLY_RUN(ПараметрыВызова);
			Если Результат["status"] = "complete" Тогда
				ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ Обновление статусов выполнено успешно",);
			Иначе
				ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ Обновление статусов завершено с ошибкой",);	
			КонецЕсли	
		КонецЕсли;	
		//Обновление статусов
		
		ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ выполнено",);	
	Исключение
		//ИнфОбОшибке = ИнформацияОбОшибке();
		//ОшибкаСтруктура = NewExtExceptionСтруктура(ИнфОбОшибке);
		ЗаписьЖурналаРегистрации("Это Saby Событие",,,"Saby Данные","Saby ФЗ ошибка",);
	КонецПопытки	
КонецПроцедуры


Процедура IniUpdate(_Ини) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		_Ини["name"] = ?(Найти(_Ини["name"], "Blockly_") = 1, _Ини["name"], "Blockly_"+_Ини["name"]);
		Ini.Вставить(_Ини["name"], _Ини["value"]);
		СуффиксХраненияИНИ = СтрЗаменить(context.params.api_url, "https://", "");
		ХранилищеОбщихНастроек.Сохранить("Saby", "Ini"+СуффиксХраненияИНИ, Ini,,"Saby");
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке, "Ошибка кеширования ini", _Ини["name"]));
	КонецПопытки;
КонецПроцедуры

Функция IniGet(Имя) Экспорт
	Попытка
		Если get_prop(Ini, Имя) = Неопределено Тогда
			ВызватьИсключение NewExtExceptionСтрока(,"Отсутствует ини", Имя);
		КонецЕсли;
		Возврат Ini[Имя]; //todo если инишки нет вернуть исключение "че нить не найдено"	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке, "Ошибка чтения ini", "(" + Имя + ")");
	КонецПопытки;
КонецФункции

Функция CalcIni(ПараметрыВызова) Экспорт
	Workspace = ПолучитьДокументDOM(IniGet(ПараметрыВызова["ini_name"]));
	context.variables = ОбновитьСтруктуру(context.variables, ПараметрыВызова);
	
	ОбщиеПараметры = get_prop(context.params,"public", Новый Структура);
	Если ТипЗнч(ОбщиеПараметры) = Тип("Структура") Тогда
		context.variables = ОбновитьСтруктуру(context.variables, ОбщиеПараметры);
	КонецЕсли;
	
	РезультатРаботыБлока = blockly_executor_execute(Workspace, ПараметрыВызова["endpoint"]);
	Возврат РезультатРаботыБлока;
КонецФункции	               

Функция ExternalCalcIni(ПараметрыКоманды) 
	Если ТипЗнч(ПараметрыКоманды["params"]) = Тип("Структура") Тогда
		Load_ini( ПараметрыКоманды["ini_name"], ПараметрыКоманды);
		context.params = ПараметрыКоманды["params"];
	Иначе
		Load_ini( ПараметрыКоманды["ini_name"] );
	КонецЕсли;
	Результат = CalcIni(ПараметрыКоманды);
	
	Если не (Результат["status"] = "complete" или Результат["status"] = "error") Тогда
		СохранитьСессиюОтладки();
	Иначе
		ОчиститьСессиюОтладки();	
	КонецЕсли;
	Возврат Результат;
КонецФункции	

Функция Load_ini( ИмяИни, ПараметрыПодключения = Неопределено ) Экспорт 
	ИмяИни = ?(Найти(ИмяИни, "Blockly_") = 1, ИмяИни, "Blockly_"+ИмяИни);
	
	Если Ini = Неопределено Тогда
		Ini = Новый Соответствие;
	ИначеЕсли ТипЗнч(Ini) = Тип("Строка") ТОгда
		//вторая и дальнейшие итерации вызова API_BLOCKLY_RUN,  По окончании которого СохранитьСессиюОтладки() превращает ini в XML строку
		Ini = decode_xml_xdto(Ini);       
	КонецЕсли;
	Если ТипЗнч(context) = Тип("Строка") Тогда
		//Раньше мы сохраняли контекст, теперь чистим его при завершении обсчета. Оставил для неведомой совместимости
		context = decode_xml_xdto(context);
	КонецЕсли;	
	Если get_prop(Ini, ИмяИни) = Неопределено Тогда
		мИниФайлов	= Новый Массив();
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", ИмяИни));
		Если ПараметрыПодключения = Неопределено Тогда
			connection_uuid = context.operation.connection_uuid;
			Если НЕ ЗначениеЗаполнено(connection_uuid) Тогда
				connection_uuid = context.params.ConnectionId;
			КонецЕсли;	
		Иначе
			Если context = Неопределено ТОгда
				//Зашли при загрузке инишки из команды формы
				//перед вызовом - API_BLOCKLY_RUN
				context = new_context();
			КонецЕсли;
			context.Вставить("params", ПараметрыПодключения["params"] );
			connection_uuid = ПараметрыПодключения["connection_uuid"];
		КонецЕсли;
		params	= Новый Структура("props, ini",Новый Структура("id, type_data", connection_uuid, 1),мИниФайлов,);
		res = local_helper_integration_api(context.params, "IntegrationConnection.ReadConnection", params);
		Если (ТипЗнч(res) = Тип("Соответствие")) и (res.Получить("data") <> Неопределено) И (res["data"].Получить(ИмяИни) <> Неопределено) Тогда
			ДанныеОбИНИ = res["data"].Получить(ИмяИни);
			Если ТипЗнч(ДанныеОбИНИ) = Тип("Соответствие") И (ДанныеОбИНИ.Получить("data_name") = ИмяИни) Тогда 
				ДанныеИНИ = ДанныеОбИНИ.Получить("data");
				Если ТипЗнч(ДанныеИНИ) = Тип("Строка") И Не ПустаяСтрока(ДанныеИНИ) Тогда 
					Ini.Вставить( ИмяИни, ДанныеИНИ );
				Иначе
					ВызватьИсключение NewExtExceptionСтрока(,"Отсутствует ини файл - "+ ИмяИни, "Load_ini");
				КонецЕсли;
			Иначе
				ВызватьИсключение NewExtExceptionСтрока(,"Данные ини файла не соответсвтвую ожидаемым. - "+ ИмяИни, "Load_ini");
			КонецЕсли;
		Иначе
			ВызватьИсключение NewExtExceptionСтрока(,"Отсутствует ини файл - "+ ИмяИни, "Load_ini");
		КонецЕсли;
	КонецЕсли;
	Возврат Ini[ИмяИни];
КонецФункции	

Функция API_BLOCKLY_UPDATE_INI(ПараметрыВызова) Экспорт
	ПрочитатьСессиюОтладки();
	ПриЗапускеРобота(ПараметрыВызова);
	IniUpdate(ПараметрыВызова);
	СохранитьСессиюОтладки();
КонецФункции

Функция API_BLOCKLY_RUN(ПараметрыВызова) Экспорт
	Попытка
		ПрочитатьСессиюОтладки();
		ПриЗапускеРобота(ПараметрыВызова);
		Результат = ExternalCalcIni(ПараметрыВызова); // Если complete или error то 		
		Возврат Результат;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = NewExtExceptionСтруктура(ИнфОбОшибке);
		Возврат Новый структура("data, status", ОшибкаСтруктура, "error");
	КонецПопытки;
КонецФункции

Функция API_BLOCKLY_COMMANDS(ПараметрыВызова) Экспорт
	ПрочитатьСессиюОтладки();
	ПриЗапускеРобота(ПараметрыВызова);
	Результат = ОбработатьКоманды(ПараметрыВызова);
	Возврат Результат;
КонецФункции

Функция API_ROBOT_RUN(ПараметрыВызова) Экспорт
	ПараметрыВызова.Параметры.Свойство("ИдСессии", ИдентификаторСессии);
	ПриЗапускеРобота(ПараметрыВызова);
	Если ПараметрыРобота = Неопределено Тогда
		ПараметрыРобота = ПараметрыВызова["Параметры"];
	КонецЕсли;
	ПараметрыЗапроса = Новый Структура("connection_uuid, operation_uuid, ini_name, commands_result, endpoint",
	ПараметрыВызова["connection_uuid"], Неопределено, ПараметрыВызова["ini_name"], Новый Массив, ПараметрыВызова["endpoint"]);
	Пока Истина Цикл
		РезультатЗапроса = SabyRobotRun(ПараметрыЗапроса);
		Если РезультатЗапроса["status"] <> "run"  Тогда
			Если РезультатЗапроса["status"] = "error" Тогда
				ВызватьИсключение РезультатЗапроса["data"];	
			КонецЕсли;
			Возврат РезультатЗапроса["data"];
		КонецЕсли;
		ПараметрыЗапроса["operation_uuid"] = РезультатЗапроса["operation_uuid"];
		ПараметрыЗапроса["commands_result"] = ОбработатьКоманды(РезультатЗапроса["commands"]);
		
	КонецЦикла;		
КонецФункции

Функция API_DOCUMENT_READ_STATUS(ПараметрыВызова) Экспорт
	ТаблицаИдентификаторов = ПолучитьТаблицуИдентификаторовДокументовСбис(ПараметрыВызова);
	Возврат РегистрыСведений.Saby_Состояние.ПолучитьСостоянияОбъектов(ТаблицаИдентификаторов);
КонецФункции 

Функция ПолучитьТаблицуИдентификаторовДокументовСбис(СписокДокументовСбис)
	tUID = Новый ТаблицаЗначений;
	tUID.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка") );
	Для Каждого ДокументСбис Из СписокДокументовСбис Цикл
		НовСтрока = tUID.Добавить();
		UID = get_prop(ДокументСбис,"ИдСБИС", get_prop(ДокументСбис,"UID"));    //TODO удаить ИдИС когда UID до онлайна доедет
		НовСтрока.UID = Формат(UID, "ЧГ=0");
	КонецЦикла;
	Возврат tUID; 
КонецФункции

Процедура API_CLEAR_HISTORY() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СервераСБИС		= СписокСерверовSaby();
	Для Каждого АдресСбис Из СервераСБИС Цикл
		ХранилищеОбщихНастроек.Удалить("Saby", "Ini"+АдресСбис.Значение,"Saby");
	КонецЦикла;
	ХранилищеОбщихНастроек.Удалить("Saby", "context",);	
КонецПроцедуры	
