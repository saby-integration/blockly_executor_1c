
// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиции = СтрРазделить82(СтрокаСоединения, "@");
	Если Позиции.Количество() > 1 Тогда
		ИмяСервера = Позиции[Позиции.Количество()-1];
		СтрокаАвторизации = Лев(СтрокаСоединения, СтрДлина(ИмяСервера) - 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Создает объект описания защищенного соединения OpenSSL.
// См. также описание объекта ЗащищенноеСоединениеOpenSSL в синтаксис-помощнике.
//
// Параметры:
//  СертификатКлиента - СертификатКлиентаФайл
//                    - СертификатКлиентаWindows
//                    - Неопределено - клиентский сертификат OpenSSL.
//  СертификатыУдостоверяющихЦентров - СертификатыУдостоверяющихЦентровФайл
//                                   - СертификатыУдостоверяющихЦентровWindows
//                                   - СертификатыУдостоверяющихЦентровLinux
//                                   - СертификатыУдостоверяющихЦентровОС
//                                   - Неопределено - сертификаты удостоверяющих центров OpenSSL. 
//
// Возвращаемое значение:
//  ЗащищенноеСоединениеOpenSSL
//
Функция НовоеЗащищенноеСоединение(СертификатКлиента = Неопределено, СертификатыУдостоверяющихЦентров = Неопределено)
	
	#Если ВебКлиент Тогда
		Возврат Неопределено;
	#ИначеЕсли МобильныйКлиент Тогда 
		Возврат Новый ЗащищенноеСоединениеOpenSSL;
	#Иначе
		Возврат Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	#КонецЕсли
	
КонецФункции

Функция НовоеHTTPСоединение(ПараметрыСоединения, Таймаут = 180, context_param)
	
	ИнтернетПрокси = Неопределено;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(ПараметрыСоединения.Схема) = "HTTPS" Или ВРег(ПараметрыСоединения.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = НовоеЗащищенноеСоединение();
	КонецЕсли;
	ProxyParam	= Неопределено;
	Если context_param.Свойство("Proxy", ProxyParam) Тогда
		ИспользоватьАутентификациюОС = get_prop(ProxyParam, "ИспользоватьАутентификациюОС", Ложь);
		Proxy = Новый ИнтернетПрокси;
		Proxy.Установить(ProxyParam.Protocol, ProxyParam.Server, Число(ProxyParam.Port), ProxyParam.User, ProxyParam.Password, ИспользоватьАутентификациюОС);
	КонецЕсли;
	Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция ПараметрыСоединения(АдресСервера)
	
	СтруктураURI = СтруктураURI(АдресСервера);
	
	ПараметрыСоединения = Новый Структура("Хост,Порт,ПутьНаСервере,Схема,ИмяСервера,Логин,Пароль");
	ЗаполнитьЗначенияСвойств(ПараметрыСоединения, СтруктураURI);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция ЗагрузитьВременныеФайлыНаДискСБИС(Знач context_params, Знач ДанныеДляЗагрузки)
	
	Если НЕ context_params.Свойство("session") Тогда
		local_helper_auth_by_login(context_params);
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения(context_params.api_url);
	ПараметрыСоединения.Логин = context_params.login;
	ПараметрыСоединения.Пароль = context_params.password;
	ПараметрыСоединения.ПутьНаСервере = "/disk/api/v1/temp/";
	
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения,,context_params);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Disposition", "attachment");
	ЗаголовкиHTTP.Вставить("Cookie", "sid="+context_params.session);
	
	Если ДанныеДляЗагрузки = Неопределено Тогда
	 	Возврат ДанныеДляЗагрузки;
	КонецЕсли; 
	
	Для каждого Вложение Из ДанныеДляЗагрузки Цикл
		Файл = Вложение["Файл"]; 
		Base64 = get_prop(Файл, "ДвоичныеДанные");
		
		Если get_prop(Файл, "Ссылка") <> Неопределено Тогда
			Продолжить; //Файл уже загружен на первой итерации отправки списочного документа
		ИначеЕсли ЗначениеЗаполнено(Base64) Тогда
			Если ТипЗнч(Base64) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные = Base64;
			ИначеЕсли ТипЗнч(Base64) = Тип("Строка") Тогда
				ДвоичныеДанные = Base64Значение(Base64);
			Иначе
				Продолжить; // Неверный тип данных
			КонецЕсли;
			Файл.Удалить("ДвоичныеДанные");
		КонецЕсли;
		 
		ЗаголовкиHTTP.Вставить("Content-Type", Файл["ContentType"]);
		ЗаголовкиHTTP.Вставить("Content-Disposition", "attachment;filename*=UTF-8''"+ КодироватьСтроку(Файл["Имя"], СпособКодированияСтроки.КодировкаURL,"UTF-8"));
		
		ЗапросHTTP = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере, ЗаголовкиHTTP);
			
		ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		
		ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
		СтрокаОтветаHTTP = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ОтветHTTP.КодСостояния=200 или ОтветHTTP.КодСостояния=201 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтветаHTTP);
			Ответ = ПрочитатьJSON(ЧтениеJSON, Истина);
			Файл.Вставить("Ссылка", Ответ.Получить("href"));
		Иначе
			Файл.Вставить("ДвоичныеДанные", Base64);
			NewExtExceptionСтрока(,"Ошибка загрузки на СБИС диск.", ОтветHTTP.КодСостояния,,Новый Структура("body", ОтветHTTP.ПолучитьТелоКакСтроку()));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗагрузки;
	
КонецФункции

