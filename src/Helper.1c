Перем BlocklyExecutor, Root, context, размыватель, variables, ИдентификаторСессии, contexts, workspaces;
Перем Ini, Operation, Executor, Functions, StepByStep, Step, Selected, NextStep, Currentblock_context, ПараметрыРобота, МенеджерыКриптографии;
Перем Proxy;

Функция add_block_to_dump(block_context, dump = Неопределено)
	Если dump = Неопределено Тогда
		dump = Новый Структура("block_id, block_type, block_path", block_context.__id, block_context.__type, block_context.__path);
	Иначе
		ВставитьСвойствоЕслиНет(dump, "block_id", block_context.__id);
		ВставитьСвойствоЕслиНет(dump, "block_type", block_context.__type);
		ВставитьСвойствоЕслиНет(dump, "block_path", block_context.__path);
	КонецЕсли;
	Возврат dump;
КонецФункции

Функция block_obj_get_path_value(знач obj, obj_path, obj_name)
	delimiter = ".";
	_path = СбисСтрРазделить(obj_path, delimiter, Ложь);
	_obj = obj;
	
	i = 0;
	size = _path.Количество();
	Пока i < size Цикл
		elem = _path[i];
		Если ТипЗнч(_obj) =  Тип("Массив") или ТипЗнч(_obj) =  Тип("ТаблицаЗначений") Тогда
			Попытка  // это число
				_obj = _obj[Число(elem)];
			Исключение
				Если (i < size - 1) Тогда
					index = ArrayHelper_find(_obj, _path[i+ 1], elem);
				Иначе
					index = -1;
				КонецЕсли;
				Если index >= 0 Тогда
					_obj = _obj[index];
					i = i + 1;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецПопытки;	
		Иначе
			Попытка
				_obj = get_prop(_obj, elem);
			Исключение	
				ВызватьИсключение NewExtExceptionСтрока(,"Не удалось получить свойство объекта","path "+obj_path+" not supported ("+obj_name+")","block_obj_get_path_value",obj);
			КонецПопытки;	
		КонецЕсли;	
		Если _obj = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		i = i + 1;
	КонецЦикла;	
	Возврат _obj;
КонецФункции

Функция СбисСтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина)
	мПодстроки = Новый Массив;
	//определяем позицию первого разделителя
	позРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	Пока позРазделителя > 0 Цикл
		//добавляем первую подстроку
		зПодстрока = Лев(ИсходнаяСтрока, позРазделителя - 1);
		Если ВключатьПустые или ЗначениеЗаполнено(зПодстрока) Тогда
			мПодстроки.Добавить(зПодстрока);
		КонецЕсли;	
		//обрезаем исходную строку до места окончания разделителя
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, позРазделителя + 1);
		//обновляем позицию разделителя
		позРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	КонецЦикла;
	//оставшуюся строку тоже добавляем в массив
	Если ВключатьПустые или ЗначениеЗаполнено(зПодстрока) Тогда	
		мПодстроки.Добавить(ИсходнаяСтрока);
	ИначеЕсли мПодстроки.Количество() = 0 Тогда
		мПодстроки.Добавить(ИсходнаяСтрока);
	КонецЕсли;	
	Возврат мПодстроки;
КонецФункции	

Функция ЭтоТипТабличнаяЧасть(ПроверяемоеЗнч)
	ПроверяемоеЗнчСтрокой = Строка(ПроверяемоеЗнч);
	Возврат ((Найти(ПроверяемоеЗнчСтрокой, "ДокументТабличнаяЧасть.") > 0)
				ИЛИ
			(Найти(ПроверяемоеЗнчСтрокой, "СправочникТабличнаяЧасть.") > 0));
КонецФункции

Процедура ПреобразоватьСтруктутуКДопустимымXDTOТипам(Переменные)
		
	Для Каждого Стр Из Переменные Цикл
		
		Если Найти(Строка(Стр.Значение),"ТабличнаяЧастьСтрока") Тогда //И СтрДлина(ТипЗнч(Стр.Значение)) > 6 Тогда
			Переменные[Стр.Ключ] = ПолучитьСтруктуруИзСтрокиТабличнойЧасти(Стр.Значение);					
		КонецЕсли;
		
		Если Найти(НРег(ТипЗнч(Стр.Значение)),"объект") Тогда
			Переменные[Стр.Ключ] = ПолучитьСтруктуруИзОбъекта(Стр.Значение);
		КонецЕсли; 
		
		Если Строка(Стр.Значение) = "СтрокаТаблицыЗначений" Тогда
			Переменные[Стр.Ключ] = ПолучитьСтруктуруИзСтрокиТаблицыЗначений(Стр.Значение);
		КонецЕсли;	
		
		Если ЭтоТипТабличнаяЧасть(Стр.Значение) Тогда
			Переменные[Стр.Ключ] = Стр.Значение.Выгрузить();
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьСтруктуруИзОбъекта(знач Объект)
	Структура = Новый Структура();     
	Для каждого Реквизит из Объект.Метаданные().Реквизиты Цикл
		Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	Для каждого Реквизит из Объект.Метаданные().СтандартныеРеквизиты Цикл
		Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;    
	Для каждого ТабличнаяЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		Структура.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;    
	Возврат Структура;
КонецФункции

Функция ПолучитьСтруктуруИзСтрокиТабличнойЧасти(знач Объект)
	Структура = Новый Структура();
	ПозицияТЧ = Найти(Строка(Объект), "ТабличнаяЧастьСтрока");
	СтрокаОбъект= СтрЗаменить(Строка(Объект), "ТабличнаяЧастьСтрока", "");
	ПутьТЧ		= СбисСтрРазделить(СтрокаОбъект, ".", Ложь);
	Если ПозицияТЧ > 0 Тогда
		ПутьТЧ.Вставить(2, "ТабличныеЧасти");
	КонецЕсли;
	ТЧ = Метаданные;
	НомЭлем = 0;
	Для каждого Элем из ПутьТЧ Цикл
		Элем = ?(Элем = "Документ", "Документы", Элем);
		Если НомЭлем = 2 Тогда 	
		КонецЕсли;	
		ТЧ = ТЧ[Элем];
		НомЭлем = НомЭлем + 1;
	КонецЦикла;
	Для каждого Реквизит из ТЧ.Реквизиты Цикл
		Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);	
	КонецЦикла;
	Для каждого Реквизит из ТЧ.СтандартныеРеквизиты Цикл
		Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);	
	КонецЦикла;	
	Возврат Структура;
КонецФункции	

Функция ПолучитьСтруктуруИзСтрокиТаблицыЗначений(знач Объект)
	Структура = Новый Структура;
	Колонки = Объект.Владелец().Колонки;
	Для каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, Объект[Колонка.Имя]);
	КонецЦикла;	
	Возврат Структура;
КонецФункции	

Функция ОбработатьКоманды(Команды)
	РезультатКоманд = Новый Массив;
	Для Каждого Команда из Команды Цикл
		ПараметрыКоманды = Команда["params"];
		ИмяКоманды = Команда["name"];
		ИдКоманды = Команда["uuid"];
		Попытка
			Если ИмяКоманды = "update_ini" Тогда
				IniUpdate(ПараметрыКоманды);						
			КонецЕсли;
			Если ИмяКоманды = "calc_ini" Тогда				
				Результат = ExternalCalcIni(ПараметрыКоманды);				
			КонецЕсли;
			Если ЗначениеЗаполнено(ИдКоманды) Тогда
				РезультатКоманд.Добавить(Новый Структура("uuid, data, status", ИдКоманды, Результат.data, Результат.status));
			КонецЕсли;
			
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			РезультатКоманд.Добавить(Новый Структура("uuid, data, status", ИдКоманды, NewExtExceptionСтруктура(ИнфОбОшибке,"Ошибка ОбработатьКоманды",ИмяКоманды), "error"));
		КонецПопытки;	
	КонецЦикла;
	Возврат РезультатКоманд;
КонецФункции

Функция encode_xdto_xml(ОбъектДляСериализации)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.УстановитьСтроку();
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	НовыйСериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДляСериализации);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции 

Функция ПоискОшибокСериализации( Знч, Реквищзит, п3, Отмена ) Экспорт 
	//todoo выпилить функию после реальзации праильного кода. 
	//Функция удаляет все не сериализуемые реквизиты из структуры
	Возврат Неопределено;
КонецФункции

Функция encode_xdto_json(ОбъектДляСериализации)
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	//ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,ОбъектДляСериализации,,"ПоискОшибокСериализации", ЭтотОбъект);
	Возврат ЗаписьJSON.Закрыть();	
КонецФункции

Функция decode_xml_xdto(СтрокаXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	Возврат НовыйСериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции 

Процедура ВставитьСвойствоЕслиНет(Объект, ИмяСвойства, Значение)
	Если ТипЗнч(Объект) = Тип("Соответствие") Тогда
		ПроверкаСвойства = ?(Объект[ИмяСвойства] = Неопределено, Ложь, Истина);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		ПроверкаСвойства = ?(ЗначениеЗаполнено(Объект),Объект.Свойство(ИмяСвойства), Ложь);
	Иначе
		Возврат;
	КонецЕсли;	
	Если ПроверкаСвойства Тогда
		Объект[ИмяСвойства] = Значение;
	Иначе
		Объект.Вставить(ИмяСвойства, Значение);
	КонецЕсли;	
КонецПроцедуры	

Функция СформироватьЗаголовкиЗапроса(РесурсЗапроса = "")	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	ДанныеОВерсии = ПолучитьИмяФайлаИНомерТекущейВерсии();
	ИдПриложения = "1C;"+ДанныеОВерсии[0]+ДанныеОВерсии[1];
	Если ИдПриложения <> Неопределено Тогда
		Заголовки.Вставить("User-Agent", ИдПриложения);
	КонецЕсли;	
	Если ВРег(РесурсЗапроса) <> "АВТОРИЗАЦИЯ" Тогда
		Заголовки.Вставить("X-SBISSessionID", ПолучитьИдентификаторСессии());
	КонецЕсли;	
	Возврат Заголовки;	
КонецФункции

Функция ПолучитьHTTPСоединение(АвторизацияОнлайн, АдресСервера)
	
	//Вызывается из формы Browser для пользователя-редактора ini, наличие прокси не критично
	Возврат	Новый HTTPСоединение(ПолучитьАдресСервиса(АвторизацияОнлайн, АдресСервера, Ложь),,,,,180, ?(найти(АдресСервера, "localhost"), Неопределено,Новый ЗащищенноеСоединениеOpenSSL()));
	
КонецФункции

Функция ПолучитьАдресСервиса(СерверOnline, АдресСервера, ДобавитьПротокол = Истина) Экспорт	
	Если  Найти(АдресСервера,"localhost") или СерверOnline Тогда 
		Результат = АдресСервера;
	Иначе	
		Результат = АдресСервера;//"https://" + 
	КонецЕсли;
	Возврат Результат;	
КонецФункции

Функция ПолучитьИдентификаторСессии( _ПараметрыРобота_ = Неопределено )
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Возврат ИдентификаторСессии;
	КонецЕсли;	
	
	Если _ПараметрыРобота_ <> Неопределено Тогда
		ПараметрыРобота = _ПараметрыРобота_;
	КонецЕсли;
	
	Хост = ПараметрыРобота["host"];
	Если ПараметрыРобота["host"] = "localhost" Тогда
		Хост = ПараметрыРобота["host2"]
	КонецЕсли;	
	Соединение = ПолучитьHTTPСоединение(Истина, Хост);
	ЗапросСервису = ПолучитьHTTPЗапрос("Авторизация");
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Х = 1;
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета, Истина);
	ИдентификаторСессии = ДанныеОтвета.Получить("result");
	Возврат ИдентификаторСессии;
КонецФункции	

функция ЗавершитьСессиюСбис()
	Соединение = ПолучитьHTTPСоединение(Истина, ПараметрыРобота["host"]);
	
	ДопЗаголовки = Новый Соответствие;
	ДопЗаголовки.Вставить("X-SBISSessionID", ИдентификаторСессии);
	ЗапросСервису = ПолучитьHTTPЗапрос("Выход", ДопЗаголовки);
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("СБИС.Выход"));
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	ОтветВозврат = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	Успешно = ОтветВозврат.Свойство("result") И ОтветВозврат.result = Неопределено;
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьHTTPЗапрос(РесурсЗапроса, ДополнительныеЗаголовки = Неопределено, ДополнительныеПараметры = Неопределено)
	АдресРесурса = "";
	СтрокаТелаЗапроса = "";
	Если ВРег(РесурсЗапроса) = "АВТОРИЗАЦИЯ" Тогда
		АдресРесурса = "/auth/service/";
		КомандаСБИС = "СБИС.Аутентифицировать";
		Если ДополнительныеПараметры = Неопределено Тогда
			СтруктураПараметровЗапроса = Новый Структура("Пароль, Логин", ПараметрыРобота["Пароль"], ПараметрыРобота["Логин"]);//ЛОГИН ПАРОЛЬ
		КонецЕсли;
		СтрокаТелаЗапроса = СформироватьТекстЗапроса(КомандаСБИС, СтруктураПараметровЗапроса);
	ИначеЕсли ВРег(РесурсЗапроса) = "ВЫХОД" Тогда
		АдресРесурса = "/auth/service/";
	ИначеЕсли Врег(РесурсЗапроса) = "СКАЧАТЬ" Тогда
		АдресРесурса = "/service/?srv=1";
		КомандаСБИС = "СБИС.Аутентифицировать";
	КонецЕсли;	
	ЗапросСервису = Новый HTTPЗапрос(АдресРесурса, СформироватьЗаголовкиЗапроса(РесурсЗапроса));	
	Если СтрокаТелаЗапроса <> "" Тогда
		ЗапросСервису.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);	
	КонецЕсли;
	Возврат ЗапросСервису;
КонецФункции

Функция СформироватьТекстЗапроса(Метод, СтруктураПараметровЗапроса=Неопределено, ПротоколЗапроса=4)
	ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":"""+Метод+""", ""protocol"": "+Формат(ПротоколЗапроса, "ЧГ=")+", ""params"":{";
	Если СтруктураПараметровЗапроса <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+ЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"},""id"":1}";	
	ТекстЗапроса = СтрЗаменить(СтрЗаменить(ТекстЗапроса,Символы.ПС," "),Символы.ВК," ");
	Возврат ТекстЗапроса;	
КонецФункции

Функция ЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса)	
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+СтрЗаменить(Элемент.Значение, """", "\""")+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+ЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ТекстЗапроса = ТекстЗапроса+"{";				
					ТекстЗапроса = ТекстЗапроса+ЗаписатьПараметрыЗапроса(ЭлементМассива);
					ТекстЗапроса = ТекстЗапроса+"},";
				Иначе
					ТекстЗапроса = ТекстЗапроса+""""+строка(ЭлементМассива);
					ТекстЗапроса = ТекстЗапроса+""",";
				КонецЕсли;	
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса;	
КонецФункции

Функция SabyRobotRun(ПараметрыВызова)
	Соединение = ПолучитьHTTPСоединение(Ложь, ПараметрыРобота["host"]);
	АдресРесурса = ПараметрыРобота["path"];
	Запрос = Новый Структура("connection_uuid, ini_name, operation_uuid, commands_result, endpoint",
	ПараметрыВызова["connection_uuid"], ПараметрыВызова["ini_name"], ПараметрыВызова["operation_uuid"], ПараметрыВызова["commands_result"], ПараметрыВызова["endpoint"]);	
	СтрокаТелаЗапроса = encode_xdto_xml(Запрос);
	ЗапросСервису = Новый HTTPЗапрос(АдресРесурса, СформироватьЗаголовкиЗапроса());
	Если СтрокаТелаЗапроса <> "" Тогда
		ЗапросСервису.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаОтвета);
	РезультатЗапроса = decode_xml_xdto(СтрокаОтвета);
	Возврат РезультатЗапроса;
КонецФункции

Процедура СохранитьСессиюОтладки()
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		Ini = ?(Ini = Неопределено, Неопределено, encode_xdto_xml(Ini));
		СуффиксХраненияИНИ = СтрЗаменить(context.params.api_url, "https://", "");
		ХранилищеОбщихНастроек.Сохранить("Saby", "Ini"+СуффиксХраненияИНИ, Ini,,"Saby");
		ХранилищеОбщихНастроек.Сохранить("Saby", "params", context.params,,);
		context.удалить("params");
		context = ?(context = Неопределено, Неопределено, encode_xdto_xml(context));
		ХранилищеОбщихНастроек.Сохранить("Saby", "context", context,,);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;	
КонецПроцедуры

Процедура ОчиститьСессиюОтладки()
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		Ini = ?(Ini = Неопределено, Неопределено, encode_xdto_xml(Ini));
		СуффиксХраненияИНИ = СтрЗаменить(context.params.api_url, "https://", "");
		ХранилищеОбщихНастроек.Сохранить("Saby", "Ini"+СуффиксХраненияИНИ, Ini,,"Saby");
		ХранилищеОбщихНастроек.Сохранить("Saby", "params", context.params,,);
		ХранилищеОбщихНастроек.Сохранить("Saby", "context", Неопределено,,);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;	
КонецПроцедуры

Процедура ПрочитатьСессиюОтладки()
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		context = ПрочитатьИзХранилища("Saby", "context",,);
		context_param	= ПрочитатьИзХранилища("Saby", "params",,);
		СуффиксХраненияИНИ = СтрЗаменить(get_prop(context_param, "api_url", ""), "https://", "");
		Ini = ПрочитатьИзХранилища("Saby", "Ini"+СуффиксХраненияИНИ,,"Saby");
		Ini = ?(Ini = Неопределено, Неопределено, decode_xml_xdto(Ini));
		Если Ini = Неопределено Тогда
			Ini = Новый Соответствие;
		КонецЕсли;	
		Если context = Неопределено Тогда
			context = new_context();
		Иначе
			context = decode_xml_xdto(context);
		КонецЕсли;
		Если context_param = Неопределено Тогда
			context_param = новый Структура;
		КонецЕсли;
		context.Вставить("params", context_param); 
		
		extsyncdoc_uuid = get_prop(context.operation,"operation_uuid","");
		Если Не ЗначениеЗаполнено(extsyncdoc_uuid) Тогда
			extsyncdoc_uuid = Строка(Новый УникальныйИдентификатор());
			context.operation.Вставить("operation_uuid", extsyncdoc_uuid);
		КонецЕсли;
		connection_uuid = get_prop(context.operation,"connection_uuid","");
		Если Не ЗначениеЗаполнено(connection_uuid) Тогда
			connection_uuid = context.params.ConnectionId;
			context.operation.Вставить("connection_uuid", connection_uuid);
		КонецЕсли;		
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры


Функция new_context()
	Возврат Новый Структура("data, variables, debug, operation, params, deferred, connection, is_deferred, command_result, commands, limit_commands", Новый Структура, Новый Соответствие, Новый Структура, Новый Структура, Новый Структура, Новый Массив, Неопределено, Ложь, Новый Соответствие, Новый Массив, 3);
КонецФункции

Функция add_new_context()
	Если 	contexts = Неопределено ТОгда 	
		contexts = Новый Массив;
	КонецЕсли;
	Если 	workspaces = Неопределено ТОгда 	
		workspaces = Новый Массив;
	КонецЕсли;
	workspaces.Добавить(root);
	contexts.Добавить(context);
	context	= new_context();
	context.params	= contexts[contexts.Количество()-1].params;
	context.operation	= contexts[contexts.Количество()-1].operation;
КонецФункции

Функция delete_last_context()
	context	= contexts[contexts.Количество() - 1];
	contexts.Удалить(contexts.Количество() - 1);
	root	= workspaces[workspaces.Количество() - 1];
	workspaces.Удалить(workspaces.Количество() - 1);
КонецФункции

Процедура ПриЗапускеРобота(ПараметрыВызова)
	Попытка
		StepByStep = Неопределено;
		StepByStep = ПараметрыВызова.Получить("debug");
		Если ТипЗнч(StepByStep) <> Тип("Булево") Тогда
			StepByStep = Ложь;
		КонецЕсли;
		Step = ПараметрыВызова["step"];
		Selected = ПараметрыВызова["selected"];
		NextStep = ?(StepByStep И НЕ ЗначениеЗаполнено(Step), Истина, Неопределено);
	Исключение
		StepByStep = Ложь;
	КонецПопытки;
	ПервыйЗапуск = Истина;
	Если ЗначениеЗаполнено(Step) Тогда
		ПервыйЗапуск = Ложь;			
	КонецЕсли;	
	Если Ini = Неопределено Тогда
		Ini = Новый Соответствие;
	КонецЕсли;	
	Если context = Неопределено Или ПервыйЗапуск Тогда
		context = new_context();
	КонецЕсли;
	context.Вставить("commands", Новый Массив);
	context.Вставить("limit_commands", 3);
	operation_uuid = "";
	connection_uuid	= "";
	Если ТипЗнч(ПараметрыВызова) = Тип("Структура") или ТипЗнч(ПараметрыВызова) = Тип("Соответствие") Тогда
		operation_uuid = get_prop(ПараметрыВызова, "operation_uuid", Неопределено);
		connection_uuid = get_prop(ПараметрыВызова, "connection_uuid", Неопределено);
		context.Вставить("command_result", ПреобразоватьМассивСтруктурВСоответствие(get_prop(ПараметрыВызова, "commands_result"), "uuid"));
	КонецЕсли;
	context.operation.Вставить("operation_uuid",operation_uuid);
	context.operation.Вставить("connection_uuid",connection_uuid);
	Попытка
		//Заполняются параметры подключения по данным connection_uuid, запуск из редактора блоки
		params = ПрочитатьИзХранилища("Saby", "params"+connection_uuid,,);
		Если params = Неопределено Тогда
			params = ПрочитатьИзХранилища("Saby", "params",,);			
		КонецЕсли;
		Если ЗначениеЗаполнено(params) Тогда
			Для Каждого КлючИЗначениеПараметр Из params Цикл
				context.params.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
			КонецЦикла;
		КонецЕсли;	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке, "Ошибки подготовки параметров."));
	КонецПопытки;
	
КонецПроцедуры

Функция ПреобразоватьМассивСтруктурВСоответствие(Мас, ИмяКлюча)
	Результат = Новый Соответствие;
	Если ТипЗнч(Мас) = Тип("Массив") Тогда
		Для Каждого Элем из Мас Цикл
			Результат.Вставить(Элем[ИмяКлюча], Элем);				
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ЗаписатьПараметрыРобота(ИмяРобота)
	ХранилищеОбщихНастроек.Сохранить("Saby", ИмяРобота, ПараметрыРобота,,);
КонецПроцедуры

Процедура ПрочитатьПараметрыРобота(ИмяРобота)
	ПараметрыРобота = ПрочитатьИзХранилища("Saby", ИмяРобота,,);		
КонецПроцедуры

Функция ПолучитьДокументDOM(ХМЛРассчета)	
	ДокументDOM = Новый ПостроительDOM;
	Если ЗначениеЗаполнено(ХМЛРассчета) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ХМЛРассчета);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Root = ДокументDOM;
		размыватель = новый РазыменовательПространствИменDOM("b", "https://developers.google.com/blockly/xml");
	КонецЕсли;
	Возврат ДокументDOM;
КонецФункции
//TODO Depricated 
Функция ПрочитатьИзХранилища(КлючОбъекта, КлючНастройки="", ОписаниеНастройки=Неопределено, ПользовательНастройки=Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастройки, ОписаниеНастройки, ПользовательНастройки);
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиции = СтрРазделить82(СтрокаСоединения, "@");
	Если Позиции.Количество() > 1 Тогда
		ИмяСервера = Позиции[Позиции.Количество()-1];
		СтрокаАвторизации = Лев(СтрокаСоединения, СтрДлина(ИмяСервера) - 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Создает объект описания защищенного соединения OpenSSL.
// См. также описание объекта ЗащищенноеСоединениеOpenSSL в синтаксис-помощнике.
//
// Параметры:
//  СертификатКлиента - СертификатКлиентаФайл
//                    - СертификатКлиентаWindows
//                    - Неопределено - клиентский сертификат OpenSSL.
//  СертификатыУдостоверяющихЦентров - СертификатыУдостоверяющихЦентровФайл
//                                   - СертификатыУдостоверяющихЦентровWindows
//                                   - СертификатыУдостоверяющихЦентровLinux
//                                   - СертификатыУдостоверяющихЦентровОС
//                                   - Неопределено - сертификаты удостоверяющих центров OpenSSL. 
//
// Возвращаемое значение:
//  ЗащищенноеСоединениеOpenSSL
//
Функция НовоеЗащищенноеСоединение(СертификатКлиента = Неопределено, СертификатыУдостоверяющихЦентров = Неопределено)
	
	#Если ВебКлиент Тогда
		Возврат Неопределено;
	#ИначеЕсли МобильныйКлиент Тогда 
		Возврат Новый ЗащищенноеСоединениеOpenSSL;
	#Иначе
		Возврат Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	#КонецЕсли
	
КонецФункции

Функция НовоеHTTPСоединение(ПараметрыСоединения, Таймаут = 180, context_param)
	
	ИнтернетПрокси = Неопределено;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(ПараметрыСоединения.Схема) = "HTTPS" Или ВРег(ПараметрыСоединения.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = НовоеЗащищенноеСоединение();
	КонецЕсли;
	ProxyParam	= Неопределено;
	Если context_param.Свойство("Proxy", ProxyParam) Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить(ProxyParam.Protocol, ProxyParam.Server, Число(ProxyParam.Port), ProxyParam.User, ProxyParam.Password);
	КонецЕсли;
	Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция ПараметрыСоединения(АдресСервера)
	
	СтруктураURI = СтруктураURI(АдресСервера);
	
	ПараметрыСоединения = Новый Структура("Хост,Порт,ПутьНаСервере,Схема,ИмяСервера,Логин,Пароль");
	ЗаполнитьЗначенияСвойств(ПараметрыСоединения, СтруктураURI);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция ЗагрузитьВременныеФайлыНаДискСБИС(Знач context_params, Знач ДанныеДляЗагрузки)
	
	Если НЕ context_params.Свойство("session") Тогда
		local_helper_auth_by_login(context_params);
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения(context_params.api_url);
	ПараметрыСоединения.Логин = context_params.login;
	ПараметрыСоединения.Пароль = context_params.password;
	ПараметрыСоединения.ПутьНаСервере = "/disk/api/v1/temp/";
	
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения,,context_params);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Disposition", "attachment");
	ЗаголовкиHTTP.Вставить("Cookie", "sid="+context_params.session);
	
	Если ДанныеДляЗагрузки = Неопределено Тогда
	 	Возврат ДанныеДляЗагрузки;
	КонецЕсли; 
	
	Для каждого Вложение Из ДанныеДляЗагрузки Цикл
		Файл = Вложение["Файл"]; 
		Base64 = get_prop(Файл, "ДвоичныеДанные");
		
		Если get_prop(Файл, "Ссылка") <> Неопределено Тогда
			Продолжить; //Файл уже загружен на первой итерации отправки списочного документа
		ИначеЕсли ЗначениеЗаполнено(Base64) Тогда
			ДвоичныеДанные = Base64Значение(Base64);
			Файл.Удалить("ДвоичныеДанные");
		КонецЕсли;
		 
		ЗаголовкиHTTP.Вставить("Content-Type", Файл["ContentType"]);
		ЗаголовкиHTTP.Вставить("Content-Disposition", "attachment;filename*=UTF-8''"+ КодироватьСтроку(Файл["Имя"], СпособКодированияСтроки.КодировкаURL,"UTF-8"));
		
		ЗапросHTTP = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере, ЗаголовкиHTTP);
			
		ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		
		ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
		СтрокаОтветаHTTP = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ОтветHTTP.КодСостояния=200 или ОтветHTTP.КодСостояния=201 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтветаHTTP);
			Ответ = ПрочитатьJSON(ЧтениеJSON, Истина);
			Файл.Вставить("Ссылка", Ответ.Получить("href"));
		Иначе
			Файл.Вставить("ДвоичныеДанные", Base64);
			NewExtExceptionСтрока(,"Ошибка загрузки на СБИС диск.", ОтветHTTP.КодСостояния,,Новый Структура("body", ОтветHTTP.ПолучитьТелоКакСтроку()));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗагрузки;
	
КонецФункции

Функция СконвертироватьВПДФА3(Знач context_params, Знач ДанныеДляЗагрузки)
	Если ДанныеДляЗагрузки = Неопределено Тогда
	 	Возврат ДанныеДляЗагрузки;
	КонецЕсли;
	Для каждого Вложение Из ДанныеДляЗагрузки Цикл
		Файл = Вложение["Файл"]; 
		Base64 = get_prop(Файл, "ДвоичныеДанные");
		Если get_prop(Файл, "Ссылка") <> Неопределено Тогда
			Продолжить; //Файл уже загружен на первой итерации отправки списочного документа
		ИначеЕсли ЗначениеЗаполнено(Base64) Тогда
			Файл.Удалить("ДвоичныеДанные");
		КонецЕсли;
				
		СуффиксФайла = СтрРазделить82(Файл["Имя"],".");
		СуффиксФайла = СуффиксФайла[СуффиксФайла.Количество() - 1]; 
		СсылкаНаPDF = local_helper_convert_to_pdfa_to_disk3(context_params, Base64, Файл["Имя"]); 
		
		Файл.Вставить("Ссылка", СсылкаНаPDF);		
	КонецЦикла;
	
	Возврат ДанныеДляЗагрузки;
КонецФункции

Функция СконвертироватьВПДФА2(Знач context_params, Знач ДанныеДляЗагрузки)
	Если ДанныеДляЗагрузки = Неопределено Тогда
	 	Возврат ДанныеДляЗагрузки;
	КонецЕсли;
	Для каждого Вложение Из ДанныеДляЗагрузки Цикл
		Файл = Вложение["Файл"]; 
		Base64 = get_prop(Файл, "ДвоичныеДанные");
		Если get_prop(Файл, "Ссылка") <> Неопределено Тогда
			Продолжить; //Файл уже загружен на первой итерации отправки списочного документа
		ИначеЕсли ЗначениеЗаполнено(Base64) Тогда
			Файл.Удалить("ДвоичныеДанные");
		КонецЕсли;
				
		СуффиксФайла = СтрРазделить82(Файл["Имя"],".");
		СуффиксФайла = СуффиксФайла[СуффиксФайла.Количество() - 1]; 
		СсылкаНаPDF = local_helper_convert_to_pdfa_to_disk2(context_params, Base64, Файл["Имя"]);
		
		Если НРег(СуффиксФайла) <> "pdf" Тогда
			Файл["Имя"] = СтрЗаменить(Вложение["Файл"]["Имя"],"."+СуффиксФайла,".pdf");
			Файл["ContentType"] = "application/pdf";
		КонецЕсли; 
		
		Файл.Вставить("Ссылка", СсылкаНаPDF);		
	КонецЦикла;
	
	Возврат ДанныеДляЗагрузки;
КонецФункции

// Проверяет наличие обязательных полей структуры по именам
//
// Параметры:
//  СтруктураИсточник - Структура, Соответствие - произвольная структура
//  ИменаКлючей - Строка - строка ключей структуры или соответствия, которые необходимо проверить. Разделитель ","
//  ПерфиксОшибки - Строка - префикс теста ошибки
//
// Возвращаемое значение:
//   Нет.
//
Процедура ПроверитьНаличиеОбязательныхПараметров(СтруктураИсточник, ИменаКлючей, ПерфиксОшибки = "")
	
	МассивИменПараметров = СтрРазделить82(ИменаКлючей,",");
	ТекстПараметров = "";
	Для каждого ИмяПараметра Из МассивИменПараметров Цикл
		Если ТипЗнч(СтруктураИсточник) = Тип("Структура") И НЕ СтруктураИсточник.Свойство(ИмяПараметра) 
			ИЛИ ТипЗнч(СтруктураИсточник) = Тип("Соответствие") И СтруктураИсточник.Получить(ИмяПараметра) = Неопределено Тогда
			
			ТекстПараметров = ТекстПараметров + ИмяПараметра + ", ";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстПараметров) Тогда
		ТекстПараметров = Лев(ТекстПараметров, СтрДлина(ТекстПараметров)-2);
		ВызватьИсключение(NewExtExceptionСтрока(,"Не заполнены обязательные свойства объекта", ПерфиксОшибки+" ("+ТекстПараметров+")"));
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеОбязательныхПараметров()

Функция helper_find_in_array(data, value, _field)
    i = 0;
    Для Каждого elem из data Цикл
        Попытка
            Если elem[_field] = value тогда
                Возврат i
			КонецЕсли;
		Исключение
			i = i + 1;
            Продолжить;
		КонецПопытки;
		i = i + 1;
	КонецЦикла;
    ВызватьИсключение "";
КонецФункции

